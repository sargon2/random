https://www.youtube.com/watch?v=YEBfamv-_do

Alice, Bob, and Eve share a color. 17

Alice generates a private number - 3.  She sends 3+17=20 to Bob and Eve.

Bob generates a private number = 97.  He sends 97+17=114 to Alice and Eve.

Alice adds her number again to make 114+3=117.  Bob adds his number again to make 20+97=117.

Eve can do 114+20-17 = 117 only because subtraction exists.  With a one-way hash you can't subtract.

So we need a function that does fn(a, b) = c, but you can't do fn2(a, c) = b.  What mathematical property is that?

Well, sha256 is such a function.

alice_private_data = make_private_data(1)
alice_public_data = combine(common_shared_data, alice_private_data)

bob_private_data = make_private_data(2)
bob_public_data = combine(common_shared_data, bob_private_data)

assertNotEquals(alice_public_data, bob_public_data)
assertEquals(combine(alice_public_data, bob_private_data), combine(bob_public_data, alice_private_data))

So the function also has to return the same result in those two cases.  I don't think sha256 does that.
The real algorithm uses exponent and mod.  For them, combine is a^b % x, where x is shared and known.


How do we assert that fn2 doesn't exist?  We can't.  Is key exchange impossible to TDD?

Is security impossible to TDD?

Maybe we just assert that subtraction doesn't work.  Then any time someone comes up with a way to break the key exchange, we do it in a test and assert it doesn't work.

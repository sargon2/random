func(arg1, arg2)

func{arg1, arg2}

func = () { return 3 }

func = (arg1, arg2) { return arg1 + arg2 }


(){return 3;}()

(arg1, arg2){return arg1 + arg2; }(3, 4)

a = (3)
a = (3 + 4)
b = 3
a = (b)
a = (b) { return b; }


func = <something>
<something>(arg1, arg2)
func(arg1, arg2)

func = () {a = 3;}
func.a # is 3

functions and objects are identical

object = (constructor_arg1) {
    do_calculation_with(constructor_arg1)
    method1 = () {...}
}

object.method1()

No way to do stuff at class declaration time.
No way to modify function/class args.  But you can call methods on it that change its state.

Immutable objects should be possible.
func.a = 3; # should error with access denied? or..?


func.a # returns 3
func.a = 3 # errors
^^ those two are dissonant.

Either:
func.a # error
func.a = 3 # error
func.method # error
func.method = ... # error

or:
func.a # returns 3
func.a = 3 # works
func.method # works
func.method = ... # works

What if getters work and setters don't?  What if only method invocations work?

What about inheritance?  Solution looking for a problem?

What about interfaces? Not needed with tdd?

What about including other files?

What about multithreading?

There should also be a #! way to run code in the new language.

for(list, (a) { print a; })
for a in list {
    print a;
}
for list, (a) { print a; }

fn = (a) { print a; }
for(list, fn)

for is just map without the return.

if(cond, { code })

It would be cool if you could import/invoke other peoples' code and it would download transparently.

What about while loops?

while({ done = true; return done; })

# old: i=0; while(i < 100) { i += 3; }
i=0; while({i<100}, { i += 3; })
^^ two blocks? really?
i=0; repeat({if(i<100, {i+=3}); return i<100})


What about do-while?

old: i=0; do { i += 3; } while i < 100;
i=0; repeat({i += 3; return i < 100;})
^^ that means closures can change the scope they came from.  Is that a good thing?

What about if(x) return; ?

if(i<100, { return; } ); # nope! only returns the inner block

OK.  So clearly we can't make if/while/do normal functions, because of weird problems.  But that doesn't affect the idea of functions and classes being the same thing.

So:

for x in list { print x; }
for(list, (x) { ... }) is elegant...

while(!done) { whatever; }

do { whatever; } while(cond);


About treating classes and functions the same again --
They're still different.  Functions have a return statement.  Classes don't.  So if they're different, why not define them differently?
Functions don't *have* to have a return statement.  Classes can't have one.
That means you can make a function that acts like a class, and returns an object instead of itself.
I could force objects to have "return self;" at the bottom of the constructor, or something along those lines...
But, you can't take a function, and treat it like an object.

func(arg1, arg2)

func{arg1, arg2}

func = () { return 3 }

func = (arg1, arg2) { return arg1 + arg2 }


(){return 3;}()

(arg1, arg2){return arg1 + arg2; }(3, 4)

a = (3)
a = (3 + 4)
b = 3
a = (b)
a = (b) { return b; }


func = <something>
<something>(arg1, arg2)
func(arg1, arg2)

func = () {a = 3;}
func.a # is 3

functions and objects are identical

object = (constructor_arg1) {
    do_calculation_with(constructor_arg1)
    method1 = () {...}
}

No way to do stuff at class declaration time.
No way to modify function/class args.  But you can call methods on it that change its state.

Immutable objects should be possible.
func.a = 3; # should error with access denied? or..?


func.a # returns 3
func.a = 3 # errors
^^ those two are dissonant.

Either:
func.a # error
func.a = 3 # error
func.method # error
func.method = ... # error

or:
func.a # returns 3
func.a = 3 # works
func.method # works
func.method = ... # works

What if getters work and setters don't?  What if only method invocations work?

What about inheritance?  Solution looking for a problem?

What about interfaces? Not needed with tdd?

What about including other files?

What about multithreading?

There should also be a #! way to run code in the new language.


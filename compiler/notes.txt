The idea is to TDD a bootstrapped compiler.

The bootstrapping should be totally minimal.  We write some minimal piece in another language (python), then all code and tests from then on are in the target language.

Python:

assertEquals(True, compile_and_run("assertEquals(1, 1)"))
assertEquals(False, compile_and_run("assertEquals(1, 2)"))


Then, in the target language, we can write arbitrary asserts:

def func(): # (or whatever the syntax is)
    return 1
assertEquals(1, func())

etc.

Side note: it could try processor instructions until it gets one that makes the tests pass.  If there's more than one, it can do performance analysis to tell which one makes the tests pass faster.


The bootstrap compiler knows how to compile exactly one thing -- the actual compiler.
Use the bootstrap compiler to compile code in the new language to create the actual compiler.  Then use the actual compiler to compile code in the new language.

Both the bootstrap and real compilers have to know how to take input arguments.  How do we dedup that?

--

The compiler is written in code.
To create the compiler, the code for the compiler must be compiled.
But how do we compile the compiler code without having the compiler in place?

We must write it in another language.  But we already have the code for it!
So we must write the compiler in two languages (existing and new) -- this is teaching the computer how the new language is the same as the old.
Or, we must use an existing compiler for the new language.  This is just doing another compilation loop.

Is the same code in two languages duplication in a TDD sense?

If you remove the bootstrap compiler and make it call the new code in the new language, the computer says "but I don't know how to run that"
If you remove the new code and use the bootstrap compiler code, then the new language is forever dependant on the existing language.

The compiler outputs ASM.  Maybe I can have ASM definitions for things that both the bootstrap and new compilers use.

The existing language can be ASM.  But even in that case, the loop that parses the input is still duplicated!

I want to build up the bootstrap compiler and the real compiler simultaneously from scratch.
 - Define empty source compiles to empty executable.

Maybe it's OK for the new compiler to invoke the bootstrap compiler.

Does the compiler code fopen() a file and write out ASM, or does it embed it inline?  (Or both)


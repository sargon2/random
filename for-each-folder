#!/bin/bash -e

failed=()
succeeded=()

quiet=false

all_folders=true
on_branch=

PARAMS=()
FOLDERS=()

if [ -z "$1" ]; then
    set -- "-h"
fi

while (( "$#" )); do
    case "$1" in
        -q|--quiet)
            quiet=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [-q] [-b <branch>] [-f folders...] [--] command..."
            echo 'The FOLDER variable will be set to the current folder.  Example: for-each-folder -- bash -c "echo \$FOLDER"'
            echo '-q: Quiet.'
            echo '-b: Only run command if folder is a git repository with the given branch checked out.'
            echo '-f: Use the given list of folders.  Requires -- to mark the end of the folders.'
            exit 0
            ;;
        -f|--folders)
            all_folders=false
            shift
            # We want to use up params until --.
            # TODO if the user specifies -f without --, give a sensible error
            while [[ "$1" != "--" ]]; do
                FOLDERS+=("$1")
                shift
            done
            shift
            PARAMS=("$@")
            break
            ;;
        -b|--on-branch)
            shift
            on_branch="$1"
            shift
            ;;
        --)
            shift
            PARAMS=("$@")
            break
            ;;
        -*|--*)
            echo "error: no such option $1" >&2;
            exit 1
            ;;
        *)
            PARAMS+=("$1")
            shift
            ;;
    esac
done

# remove the options from the positional parameters
set -- "${PARAMS[@]}"

$all_folders && FOLDERS=(*)

for FOLDER in "${FOLDERS[@]}"; do
    export FOLDER
    if [ ! -d "$FOLDER" ]; then
        continue
    fi
    if [ "$FOLDER" = "." ]; then
        continue
    fi
    if [ "$FOLDER" = ".." ]; then
        continue
    fi
    if [ -d "$FOLDER" ]; then
        pushd "$FOLDER" >/dev/null

            SKIP=false

            if [ -n "$on_branch" ]; then
                if ! git rev-parse --git-dir >/dev/null 2> /dev/null; then
                    # Not a git repo
                    SKIP=true
                else
                    CURR_BRANCH=`git rev-parse --abbrev-ref HEAD`
                    if [ ! "$CURR_BRANCH" == "$on_branch" ]; then
                        SKIP=true
                    fi
                fi
            fi
            if ! $SKIP; then
                ! $quiet && echo
                ! $quiet && echo "$FOLDER:"
                ret=0
                "$@" || ret=$?
                if [ $ret -ne 0 ]; then
                    failed+=("$FOLDER")
                else
                    succeeded+=("$FOLDER")
                fi
            fi
        popd >/dev/null
    fi
done

if [ ! "$quiet" = true ]; then
    echo
    if [ -n "$succeeded" ]; then
        echo "succeeded: ${succeeded[@]}"
    fi
    echo
    if [ -n "$failed" ]; then
        echo "failed: ${failed[@]}"
    fi
fi
